{
  "info": {
    "name": "Node MongoDB Backend API",
    "description": "Complete API collection for Node.js MongoDB backend with authentication, user management, roles, and permissions",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "node-mongo-backend-api"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5001/api",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"phone\": \"1234567890\",\n  \"password\": \"password123\",\n  \"roleId\": \"{{roleId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user. Cannot register with SUPER_ADMIN role."
          },
          "response": []
        },
        {
          "name": "Login with Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.accessToken) {",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password. Automatically sets access and refresh tokens."
          },
          "response": []
        },
        {
          "name": "Login with Phone",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.accessToken) {",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phone\": \"9999999999\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with phone and password. Automatically sets access and refresh tokens."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.accessToken) {",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh-token",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh-token"]
            },
            "description": "Get new access token using refresh token."
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout user and invalidate refresh token."
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Jane Doe\",\n  \"email\": \"jane@example.com\",\n  \"phone\": \"0987654321\",\n  \"password\": \"password123\",\n  \"roleId\": \"{{roleId}}\",\n  \"image\": \"https://example.com/image.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            },
            "description": "Create a new user (admin function)."
          },
          "response": []
        },
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search term for name, email, or phone",
                  "disabled": true
                }
              ]
            },
            "description": "Get all users with pagination and optional search."
          },
          "response": []
        },
        {
          "name": "Search Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/search?q=john&page=1&limit=5",
              "host": ["{{baseUrl}}"],
              "path": ["users", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "john",
                  "description": "Search query"
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "5",
                  "description": "Items per page"
                }
              ]
            },
            "description": "Search users by name, email, or phone."
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            },
            "description": "Get specific user details by ID."
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Updated\",\n  \"email\": \"john.updated@example.com\",\n  \"phone\": \"1111111111\",\n  \"roleId\": \"{{newRoleId}}\",\n  \"image\": \"https://example.com/new-image.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            },
            "description": "Update user information."
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            },
            "description": "Soft delete a user."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Role Management",
      "item": [
        {
          "name": "Create Role",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"MANAGER\",\n  \"description\": \"Manager role with elevated permissions\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles"]
            },
            "description": "Create a new role."
          },
          "response": []
        },
        {
          "name": "Get All Roles",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles"]
            },
            "description": "Get all active roles."
          },
          "response": []
        },
        {
          "name": "Search Roles",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/roles/search?q=manager",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "manager",
                  "description": "Search query for role name or description"
                }
              ]
            },
            "description": "Search roles by name or description."
          },
          "response": []
        },
        {
          "name": "Get Role by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "{{roleId}}"]
            },
            "description": "Get specific role details with permissions."
          },
          "response": []
        },
        {
          "name": "Update Role",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"UPDATED_MANAGER\",\n  \"description\": \"Updated manager role description\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "{{roleId}}"]
            },
            "description": "Update role information. Note: SUPER_ADMIN and ADMIN roles cannot be modified."
          },
          "response": []
        },
        {
          "name": "Delete Role",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "{{roleId}}"]
            },
            "description": "Soft delete a role. Note: SUPER_ADMIN and ADMIN roles cannot be deleted."
          },
          "response": []
        },
        {
          "name": "Set Role Permissions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"permissionIds\": [\"{{permissionId1}}\", \"{{permissionId2}}\", \"{{permissionId3}}\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles/{{roleId}}/permissions",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "{{roleId}}", "permissions"]
            },
            "description": "Assign permissions to a role. Note: SUPER_ADMIN and ADMIN role permissions cannot be modified."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Permission Management",
      "item": [
        {
          "name": "Get All Permissions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/permissions",
              "host": ["{{baseUrl}}"],
              "path": ["permissions"]
            },
            "description": "Get all available permissions in the system."
          },
          "response": []
        },
        {
          "name": "Get My Permissions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/permissions/my-permissions",
              "host": ["{{baseUrl}}"],
              "path": ["permissions", "my-permissions"]
            },
            "description": "Get permissions for the currently authenticated user."
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token if expired",
          "const accessToken = pm.collectionVariables.get('accessToken');",
          "if (accessToken) {",
          "    // Decode JWT to check expiration",
          "    try {",
          "        const payload = JSON.parse(atob(accessToken.split('.')[1]));",
          "        const currentTime = Math.floor(Date.now() / 1000);",
          "        ",
          "        if (payload.exp < currentTime) {",
          "            console.log('Token expired, attempting refresh...');",
          "            // Token is expired, try to refresh",
          "            const refreshToken = pm.collectionVariables.get('refreshToken');",
          "            if (refreshToken) {",
          "                pm.sendRequest({",
          "                    url: pm.collectionVariables.get('baseUrl') + '/auth/refresh-token',",
          "                    method: 'POST',",
          "                    header: {",
          "                        'Content-Type': 'application/json'",
          "                    },",
          "                    body: {",
          "                        mode: 'raw',",
          "                        raw: JSON.stringify({ refreshToken: refreshToken })",
          "                    }",
          "                }, function (err, response) {",
          "                    if (!err && response.code === 200) {",
          "                        const responseJson = response.json();",
          "                        if (responseJson.success) {",
          "                            pm.collectionVariables.set('accessToken', responseJson.data.accessToken);",
          "                            pm.collectionVariables.set('refreshToken', responseJson.data.refreshToken);",
          "                            console.log('Token refreshed successfully');",
          "                        }",
          "                    }",
          "                });",
          "            }",
          "        }",
          "    } catch (e) {",
          "        console.log('Could not decode token');",
          "    }",
          "}"
        ]
      }
    }
  ]
}